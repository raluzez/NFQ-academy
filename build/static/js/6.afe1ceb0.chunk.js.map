{"version":3,"sources":["containers/User/User.module.css","containers/User/User.js"],"names":["module","exports","User","state","numberChecked","timeLeft","input","isRegistration","dayClicked","numberHandler","event","setState","target","value","checkNumber","isExist","props","data","map","specialistData","clients","patient","name","Number","dateClick","info","dateClicked","dateStr","registrationHandler","specialistIndex","backHandler","message","this","variant","size","style","disabled","Math","ceil","user","className","Styles","CheckNumberContainer","Header","CheckNumberHeader","Body","Form","Control","type","placeholder","onChange","required","onClick","as","NavLink","to","token","i","key","userRegistrations","item","Arrow","date","defaultView","plugins","dayGridPlugin","locale","lt","weekends","customButtons","myCustomButton","text","click","header","left","center","right","console","log","events","start","end","rendering","backgroundColor","Component","connect","auth","main"],"mappings":"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","file":"static/js/6.afe1ceb0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckNumberContainer\":\"User_CheckNumberContainer__1gj4I\",\"CheckNumberHeader\":\"User_CheckNumberHeader__1luhX\",\"Form\":\"User_Form__pOEwp\",\"Arrow\":\"User_Arrow__3hPl9\",\"Day\":\"User_Day__32uU0\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from 'react-router-dom';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport lt from '@fullcalendar/core/locales/lt';\nimport \"../../components/Calendar/calendar.scss\";\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n\nimport Styles from \"./User.module.css\";\n\nclass User extends Component {\n    state = {\n        numberChecked: null,\n        timeLeft: null,\n        input: null,\n        isRegistration: false,\n        dayClicked: false\n    }\n\n    numberHandler = (event) => {\n        this.setState({input: event.target.value})\n    }\n\n    checkNumber = () => {\n        let isExist = false\n        this.props.data.map(specialistData => {\n            return specialistData.clients.map(patient => {\n                if(patient.name === Number(this.state.input)) {\n                    this.setState({timeLeft:patient.timeLeft, numberChecked:patient.name})\n                    isExist = true\n                }\n                return this.state.timeLeft\n            })\n        })  \n        if(!isExist) {this.setState({timeLeft:false, numberChecked:this.state.input})}    \n    }\n\n    dateClick = (info) => {\n        this.setState({dateClicked: info.dateStr})\n    }\n\n    registrationHandler = (specialistIndex) => {\n        this.setState({isRegistration: specialistIndex})\n    }\n\n    backHandler = () => {\n        this.setState({isRegistration: false})\n    }\n    render () {\n\n        let message = null\n\n        if(this.state.timeLeft){\n            message = <Button variant=\"success\" size=\"lg\" style={{\"width\":\"100%\", \"marginBottom\" : \"5%\", \"marginTop\":\"2.5%\"}} disabled >{`${this.state.numberChecked} liko laukti ${Math.ceil(this.state.timeLeft)} min`}</Button>\n        }\n\n        if(this.state.timeLeft === false){\n            message = <Button variant=\"danger\" size=\"lg\" style={{\"width\":\"100%\", \"marginBottom\" : \"5%\", \"marginTop\":\"2.5%\"}} disabled ><p>{`${this.state.numberChecked} vizito šiandien nėra`}</p><p>Prisijunkite norėdami sužinoti daugiau</p></Button>\n        }\n\n        let user = \n            <Card className={Styles.CheckNumberContainer}>\n                <Card.Header className={Styles.CheckNumberHeader} style={{\"borderRadius\": \"0\"}}>\n                        PATIKRINT LAIKĄ\n                </Card.Header >\n                <Card.Body >\n                <Form className={Styles.Form}>\n                    {message}\n                    <Form.Control size=\"lg\" type=\"text\" placeholder=\"Numeris\" onChange={this.numberHandler} required/>\n                    <Button variant=\"outline-success\" size=\"lg\" style={{\"marginTop\":\"0%\"}} onClick={this.checkNumber}>Patikrinti</Button> \n                    <Button as={NavLink} to=\"/login\" variant=\"outline-primary\" size=\"lg\" style={{\"marginTop\": \"5%\", \"width\": \"50%\"}}>Prisijungti</Button>                    \n                </Form>\n                </Card.Body>\n            </Card>\n\n        if (this.props.token) {\n            user =\n            <>\n                <Card className={Styles.CheckNumberContainer}>\n                    <Card.Header className={Styles.CheckNumberHeader} style={{\"borderRadius\": \"0\"}}>\n                            REGISTRUOTIS\n                    </Card.Header>\n                    <Card.Body >\n                        {this.props.data.map((specialistData, i) => {\n                            return <Button \n                                        key={specialistData.name} \n                                        variant=\"outline-success\" \n                                        size=\"lg\" \n                                        style={{\"width\": \"100%\",\"marginBottom\": \"2.5%\", \"marginTop\": \"2.5%\"}}\n                                        onClick={()=>this.registrationHandler(i)}>\n                                            {specialistData.name}\n                                    </Button>\n                        })}                   \n                    </Card.Body>\n                </Card>  \n                <Card className={Styles.CheckNumberContainer}>\n                    <Card.Header className={Styles.CheckNumberHeader} style={{\"borderRadius\": \"0\"}}>\n                            JŪSŲ REGISTRACIJOS\n                    </Card.Header>\n                    <Card.Body >\n                        {!this.props.userRegistrations\n                            ? <Button \n                                variant=\"danger\" \n                                size=\"lg\" \n                                style={{\"width\":\"100%\", \"marginBottom\" : \"2.5%\", \"marginTop\": \"2.5%\"}} \n                                disabled >\n                                    Registracijų nerasta\n                                </Button>\n                            : this.props.userRegistrations.map( item =>\n                                (<Button \n                                    variant=\"success\" \n                                    size=\"lg\" style={{\"width\":\"100%\", \"marginBottom\" : \"2.5%\", \"marginTop\": \"2.5%\"}} \n                                    disabled >\n                                        {item.name} \n                                        {<i className={`fas fa-arrow-right ${Styles.Arrow}`}></i>}\n                                        {item.date}\n                                </Button> ))\n                        }\n                    </Card.Body>\n                </Card>\n            </>\n        }\n        \n\n     if(this.state.isRegistration || this.state.isRegistration === 0){\n            user =  <div style={{\"width\":\"65%\", 'margin':'auto', 'marginTop': '2.5%'}}>\n                        <FullCalendar \n                            defaultView=\"dayGridMonth\" \n                            plugins={[ dayGridPlugin ]} \n                            locale={lt}\n                            weekends={false}\n                            customButtons={{\n                                myCustomButton : {\n                                    text: 'Grįžti',\n                                    click : () => this.backHandler()\n                                }}\n                            }\n                            header={{   \n                                left: 'myCustomButton,timeGridDay',\n                                center:'title',\n                                right: 'prev,next'\n                            }}\n                            dateClick={(info) => console.log(info.dateStr)}\n                            events= {[\n                                    {\n                                    start: '2019-09-24',\n                                    end:'2019-09-25',\n                                    rendering: 'background',\n                                    backgroundColor:\"green\"\n                                    }\n                                    ]}\n                                />\n                </div>\n        }\n        return (\n            <>{user}</>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        data: state.main.data\n    }\n}\n\nexport default connect(mapStateToProps)(User);"],"sourceRoot":""}