{"version":3,"sources":["store/actions/actionTypes.js","components/Navbar/Navbar.js","components/Jumbotron/JumbotronModal/JumbotronModal.js","containers/Home/Home.js","App.js","serviceWorker.js","store/reducers/main.js","store/reducers/auth.js","index.js","components/Jumbotron/Jumbotron.module.css","components/Jumbotron/JumbotronModal/JumbotronModal.module.css","store/actions/main.js","store/actions/auth.js","store/actions/index.js","components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.module.css","containers/Home/Home.module.css"],"names":["FETCH_DATA_START","FETCH_DATA_FAIL","FETCH_DATA_SUCCESS","FETCH_SERVED_PATIENTS_START","FETCH_SERVED_PATIENTS_FAIL","FETCH_SERVED_PATIENTS_SUCCESS","JUMBOTRON_CLICKED","CLOSE_JUMBOTRON_MODAL","TIMER_START","REGISTER_CLIENT","CLOSE_SUCCESS_SCREEN","CALL_PATIENT","PATIENT_SERVED","PATIENT_SERVED_FAIL","ADD_VISIT_TIME","PATIENT_SAVE_START","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","RESET_ERROR","LOGOUT","CHECK_SPECIALIST_FAIL","CHECK_SPECIALIST_SUCCESS","connect","state","token","auth","specialistIndex","props","variant","className","Styles","Navbar","Item","Link","eventKey","as","NavLink","to","exact","jumbotronModal","clientsInfo","clients","map","client","key","id","ClientInfo","name","Arrow","Math","ceil","timeLeft","firstClient","Blinking","highlightArr","index","clickedIndex","style","JumbotronModal","CloseIcon","onClick","closeModal","Home","clickedJumbotronClients","jumbotronName","data","specialist","checkWithPatient","indexArray","withPatient","i","push","this","onFetchData","home","animation","loading","Container","item","highlight","Jumbotron","onclick","onClickedJumbotron","showModal","clickedJumbotron","show","onCloseJumbotronModal","Component","main","showJumbotronModal","dispatch","jumbotronData","jumbotronIndex","actions","AddUser","React","lazy","Login","Logout","Specialist","User","Admin","App","onAutoSignin","timerOn","setInterval","onTimer","showNavbar","fallback","path","component","registrationSuccessful","Boolean","window","location","hostname","match","initialState","registrationSuccessData","error","servedPatients","timerUpdate","reducer","action","type","actionTypes","dataKey","newData","timeTillVisit","newClientsTime","updatedSpecialisData","updateCallPatientData","specialistData","indexOf","withPatientTrue","dataWithAddedTime","visitTime","fetchedservedPatients","patientsArr","patient","console","log","userId","idToken","isAuth","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","mainReducer","authReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","fetchData","axios","get","response","Object","keys","fetchDataSuccess","catch","fetchDataFail","jumbotronClicked","closeJumbotronModal","timer","registerClient","lastClient","lastClientName","length","clientName","newClients","concat","specialistName","post","newDataKey","delete","registerClientSuccess","closeSuccessScreen","callPatient","patientSaved","clientsArray","slice","timeSubstract","patientServedSuccess","fetchServedPatients","res","fetchedPatients","fetchServedPatientsFail","addVisitTime","authStart","authSuccess","email","password","login","authData","returnSecureToken","url","expirationDate","Date","getTime","expiresIn","localStorage","setItem","localId","checkSpecialist","checkAuthTimeout","authFail","checkSpecialistSuccess","checkSpecialistFail","resetError","expirationTime","setTimeout","logout","removeItem","authCheckLogin","getItem","jumbotronContainer","specialistStyle","JumbotronCard","Header","toUpperCase","Body"],"mappings":"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","file":"static/js/main.4e6d889f.chunk.js","sourcesContent":["export const FETCH_DATA_START = \"FETCH_DATA_START\";\nexport const FETCH_DATA_FAIL = \"FETCH_DATA_FAIL\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\n\nexport const FETCH_SERVED_PATIENTS_START = \"FETCH_SERVED_PATIENTS_START\";\nexport const FETCH_SERVED_PATIENTS_FAIL = \"FETCH_SERVED_PATIENTS_FAIL\";\nexport const FETCH_SERVED_PATIENTS_SUCCESS = \"FETCH_SERVED_PATIENTS_SUCCESS\"\n\nexport const JUMBOTRON_CLICKED = \"JUMBOTRON_CLICKED\";\nexport const CLOSE_JUMBOTRON_MODAL = \"CLOSE_JUMBOTRON_MODAL\";\nexport const TIMER_START = \"TIMER_START\";\nexport const REGISTER_CLIENT = \"REGISTER_CLIENT\";\nexport const CLOSE_SUCCESS_SCREEN = \"CLOSE_SUCCESS_SCREEN\";\nexport const CALL_PATIENT = \"CALL_PATIENT\";\nexport const PATIENT_SERVED = \"PATIENT_SERVED\";\nexport const PATIENT_SERVED_FAIL = \"PATIENT_SERVED_FAIL\";\nexport const ADD_VISIT_TIME = \"ADD_VISIT_TIME\";\nexport const PATIENT_SAVE_START = \"PATIENT_SAVE_START\";\n\nexport const AUTH_START = \"AUTH_START\";\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const RESET_ERROR = \"RESET_ERROR\";\nexport const LOGOUT = \"LOGOUT\";\nexport const CHECK_SPECIALIST_FAIL = \"CHECK_SPECIALIST_FAIL\";\nexport const CHECK_SPECIALIST_SUCCESS = \"CHECK_SPECIALIST_SUCCESS\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Nav from 'react-bootstrap/Nav';\nimport { connect } from \"react-redux\";\n\nimport Styles from \"./Navbar.module.css\";\n\nconst navbar = (props) => (\n    <Nav variant=\"pills\" className={Styles.Navbar}>\n        <Nav.Item>\n            <Nav.Link eventKey=\"home\" as={NavLink} to=\"/\" exact>Švieslentė</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n            <Nav.Link eventKey=\"addUser\" as={NavLink} to=\"/addUser\" exact>Greita registracija</Nav.Link>\n        </Nav.Item>\n        {props.specialistIndex !== null\n        ? props.specialistIndex !== true \n            ? <Nav.Item>\n                <Nav.Link eventKey=\"specialis\" as={NavLink} to=\"/specialis\" exact>Specialistui</Nav.Link>\n            </Nav.Item>\n            : <Nav.Item>\n                <Nav.Link eventKey=\"admin\" as={NavLink} to=\"/admin\" exact>Administratorius</Nav.Link>\n            </Nav.Item>\n        : <Nav.Item>\n            <Nav.Link eventKey=\"user\" as={NavLink} to=\"/user\" exact>Vartotojui</Nav.Link>\n        </Nav.Item>}\n        {!props.token\n        ?   <Nav.Item>\n                <Nav.Link eventKey=\"login\" as={NavLink} to=\"/login\" exact>Prisijungti</Nav.Link>\n            </Nav.Item>\n        : <Nav.Item>\n                <Nav.Link eventKey=\"logout\" as={NavLink} to=\"/logout\" exact>Atsijungti</Nav.Link>\n            </Nav.Item>\n        } \n    </Nav>\n)\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        specialistIndex: state.auth.specialistIndex\n    }\n}\n\nexport default connect(mapStateToProps)(navbar);","import React from \"react\";\n\nimport Styles from \"./JumbotronModal.module.css\";\n\nconst jumbotronModal = (props) => {\n\n    let clientsInfo =\n        props.clients.map(client => (\n            <div key={client.id} className={Styles.ClientInfo}>\n                <span>{client.name}</span>\n                <i className={`fas fa-arrow-right ${Styles.Arrow}`}></i>\n                <span>{Math.ceil(client.timeLeft,1)} min</span>\n            </div>))\n\n    if(props.clients[0].timeLeft < 0) {\n        const firstClient =  props.clients[0]\n        clientsInfo[0] =\n            <div key={firstClient.name} className={Styles.ClientInfo}>\n                <span className={Styles.Blinking}>{firstClient.name}</span>\n                <i className={`fas fa-arrow-right ${Styles.Arrow} ${Styles.Blinking}`}></i>\n                <span className={Styles.Blinking}>{Math.ceil(firstClient.timeLeft,1)} min</span>\n            </div> \n    }\n\n    props.highlightArr.map(index =>{\n        if(index === props.clickedIndex) {\n            const firstClient =  props.clients[0]\n            clientsInfo[0] =\n                <div key={firstClient.id} className={Styles.ClientInfo}>\n                    <span style={{\"color\":\"green\",\"margin\":\"auto\"}}>{firstClient.name}</span>\n                </div>\n        }\n        return clientsInfo\n    })\n\n    return (\n    <div className={Styles.JumbotronModal}>\n        <i className={`fas fa-times ${Styles.CloseIcon}`} onClick={props.closeModal}></i>\n        {clientsInfo}\n    </div>\n)}\n\nexport default jumbotronModal;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport JumbotronContainer from \"../../components/Jumbotron/Jumbotron\";\nimport JumbotronModal from \"../../components/Jumbotron/JumbotronModal/JumbotronModal\";\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport * as actions from \"../../store/actions\";\n\nimport Styles from \"./Home.module.css\";\n\n\nclass Home extends Component {\n\n    componentDidMount () {\n        this.props.onFetchData(this.props.key)\n    }\n\n    clickedJumbotronClients = (jumbotronName, data) => {\n        let clients = []\n        data.map(specialist => {\n            if(specialist.name === jumbotronName){\n                clients = specialist.clients\n            }\n            return null\n            // catch error and return else\n        }) \n        return clients  \n    }\n\n    checkWithPatient = () => {\n        let indexArray = []\n        this.props.withPatient.map((specialist, i) => { \n            if(specialist){\n               indexArray.push(i)\n            }\n            return indexArray\n        })\n        return indexArray\n    }\n    \n    render () {\n        const indexArray = this.checkWithPatient()\n        let home = \n            <div style={{\"display\": \"flex\", \"alignItems\": \"center\", \"height\": \"50vh\", \"justifyContent\": \"center\"}}>\n                <Spinner animation=\"grow\" />\n            </div>\n        \n        if(!this.props.loading){\n            home =\n            <div className={Styles.Container}>\n                {(this.props.data || []).map((item, i) =>{\n                    let highlight = null\n                    indexArray.map(index => {\n                        if(index === i){\n                            highlight = index\n                        } return highlight\n                    })\n                    return (\n                    <JumbotronContainer \n                        key={item.name}\n                        highlight={highlight}\n                        name={item.name}\n                        clients={item.clients}\n                        onclick={() => this.props.onClickedJumbotron(item, i)}/>\n                    )})}\n            </div> \n        }\n     \n        return (         \n            <>\n                {this.props.showModal \n                    ? <JumbotronModal \n                        clients={this.clickedJumbotronClients(this.props.clickedJumbotron.name, this.props.data)} \n                        show={this.props.showModal} \n                        closeModal={() => this.props.onCloseJumbotronModal()}\n                        highlightArr={indexArray}\n                        clickedIndex={this.props.clickedJumbotron.index}/>\n                    : null}\n                {home}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        showModal: state.main.showJumbotronModal,\n        clickedJumbotron: state.main.clickedJumbotron,\n        data: state.main.data,\n        withPatient: state.main.withPatient,\n        loading: state.main.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClickedJumbotron: (jumbotronData, jumbotronIndex) => dispatch(actions.jumbotronClicked(jumbotronData, jumbotronIndex)),\n        onCloseJumbotronModal: () => dispatch(actions.closeJumbotronModal()),\n        onFetchData: () => dispatch(actions.fetchData())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Component, Suspense } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport * as actions from \"./store/actions\";\n\nimport Home from \"./containers/Home/Home\";\nconst AddUser = React.lazy(() => import('./containers/AddUser/AddUser'));\nconst Login = React.lazy(() => import('./containers/Auth/Login'));\nconst Logout = React.lazy(() => import(\"./containers/Auth/Logout/Logout\"));\nconst Specialist = React.lazy(() => import('./containers/Specialist/Specialist'));\nconst User = React.lazy(() => import('./containers/User/User'));\nconst Admin = React.lazy(() => import('./containers/Admin/Admin'));\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onAutoSignin();\n        if (!this.props.timerOn) {\n            setInterval(() => this.props.onTimer(),5000)\n        };\n      };\n\n    render () {\n\n        return (\n            <div>\n                {!this.props.showNavbar\n                    ? <Navbar/>\n                    : null}\n                <main style={{\"overflow\": \"hidden\"}}>\n                    <Suspense fallback=\"...\">\n                        <Switch>\n                            <Route path=\"/addUser\" component={AddUser}/>\n                            {!this.props.token\n                            ?<Route path=\"/login\" component={Login}/>\n                            :<Route path=\"/logout\" component={Logout}/>}\n                            {this.props.specialistIndex !== null\n                            ? this.props.specialistIndex !== true \n                                ?<Route path=\"/specialis\" component={Specialist}/>\n                                :<Route path=\"/admin\" component={Admin}/>\n                            :<Route path=\"/user\" component={User}/>}\n                            <Route path=\"/\" exact component={Home}/>\n                            <Redirect to=\"/\"/>\n                        </Switch>\n                    </Suspense> \n                </main>         \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        showNavbar: state.main.registrationSuccessful,\n        timerOn: state.main.timerOn,\n        specialistIndex: state.auth.specialistIndex,\n        token: state.auth.token\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      onAutoSignin: () => dispatch(actions.authCheckLogin()),\n      onTimer: () => dispatch(actions.timer())\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\nimport Data from \"../../dummyData.json\";\n\nconst initialState = {\n    clickedJumbotron: null,\n    showJumbotronModal: false,\n    data: Data,\n    timerOn: false,\n    registrationSuccessful: false,\n    registrationSuccessData: {},\n    loading: false,\n    error: null,\n    withPatient: [\n        false,\n        false,\n        false\n    ],\n    servedPatients:[[],[],[]]\n}\n\nconst timerUpdate = (state) => {\n    const newData = [...state.data]\n    return newData.map(item => {\n        return {\n            ...item, \n            clients: item.clients.map(client => {\n                return {\n                    ...client,\n                    timeLeft: (client.timeLeft -= (1/60)*5)\n                }})\n            }\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_DATA_START:\n            return {\n                ...state,\n                loading: true\n            }\n        case actionTypes.FETCH_DATA_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.FETCH_DATA_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                data: action.data,\n                dataKey: action.dataKey\n            }\n        case actionTypes.JUMBOTRON_CLICKED:\n            return {\n                ...state,\n                clickedJumbotron: action.jumbotronData,\n                showJumbotronModal: true\n            }\n        case actionTypes.CLOSE_JUMBOTRON_MODAL:\n            return {\n                ...state,\n                showJumbotronModal: false,\n                clickedJumbotron: null\n            }\n        case actionTypes.TIMER_START:\n            return {\n                ...state,\n                data: timerUpdate(state),\n                timerOn: true\n            }\n        case actionTypes.REGISTER_CLIENT:\n            return {\n                ...state,\n                registrationSuccessful: true,\n                data: action.newData,\n                registrationSuccessData: action.registrationSuccessData,\n                dataKey: action.dataKey\n                }\n        case actionTypes.CALL_PATIENT:\n            const timeTillVisit = state.data[action.index].clients[0].timeLeft\n            const newClientsTime = () => {\n                return state.data[action.index].clients.map(client => {\n                    client.timeLeft -= timeTillVisit\n                    return client\n                })\n            }\n            const updatedSpecialisData = {...state.data[action.index], clients: newClientsTime()}\n            const updateCallPatientData = () => {\n                return state.data.map(specialistData => {\n                    if(state.data.indexOf(specialistData) === action.index){\n                        return updatedSpecialisData\n                    } else { return specialistData }\n                })\n            }\n            let withPatientTrue = [...state.withPatient]\n            withPatientTrue[action.index] = true\n            return {\n                ...state,\n                withPatient: withPatientTrue,\n                data: updateCallPatientData()\n            }\n        case actionTypes.PATIENT_SERVED:\n            //finish\n            return {\n                ...state,\n                withPatient: action.withPatient,\n                data: action.newData,\n                loading: false,\n                dataKey: action.dataKey\n            }\n        case actionTypes.PATIENT_SAVE_START:\n            return {\n                ...state,\n                loading: true\n            }\n        case actionTypes.ADD_VISIT_TIME:\n            const dataWithAddedTime = () => {\n                let data = [...state.data]\n                data.map(specialistData => {\n                    let clients = specialistData.clients\n                    if(state.data.indexOf(specialistData) === action.specialistIndex) {\n                        clients = specialistData.clients.map(client =>{\n                            return client.timeLeft += specialistData.visitTime\n                        })\n                    }\n                    return data.clients = clients           \n                })  \n                return data\n            }\n            return {\n                ...state,\n                data: dataWithAddedTime()\n            }\n        case actionTypes.CLOSE_SUCCESS_SCREEN:\n            return {\n                ...state,\n                registrationSuccessful: false,\n                specialistData: null\n            }\n        case actionTypes.FETCH_SERVED_PATIENTS_START:\n            return {\n                ...state,\n                loading: true,\n                servedPatients:[[],[],[]]\n            }\n        case actionTypes.FETCH_SERVED_PATIENTS_FAIL:\n            return {\n                ...state,\n                error: action.error,\n                loading: false\n            }\n        case actionTypes.FETCH_SERVED_PATIENTS_SUCCESS:\n            const fetchedservedPatients = state.servedPatients\n            state.servedPatients.map((item, i)=>{\n                return action.patientsArr.map(patient => {\n                    if (patient.specialistIndex === i){\n                        fetchedservedPatients[i].push(patient)\n                    }\n                    return item\n                })\n            })\n            console.log(fetchedservedPatients)\n            return {\n                ...state,\n                loading: false,\n                servedPatients: fetchedservedPatients\n\n            }\n        default: return state\n    }\n}\n\nexport default reducer;","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    specialistIndex: null\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: \n            return {\n                ...state,\n                loading: true,\n                error: null\n            }\n        case actionTypes.AUTH_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.AUTH_SUCCESS:\n            return {\n                ...state,\n                token: action.idToken,\n                userId: action.userId,\n                error: null,\n                isAuth: true\n            }\n        case actionTypes.CHECK_SPECIALIST_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        case actionTypes.CHECK_SPECIALIST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                specialistIndex: action.index\n            }\n        case actionTypes.RESET_ERROR:\n            return {\n                ...state,\n                error: null\n            }\n        case actionTypes.LOGOUT:\n            return {\n                ...state,\n                token: null,\n                userId: null,\n                error: null,\n                loading: false,\n                specialistIndex: null\n            }\n        default : return state\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from './serviceWorker';\n\nimport mainReducer from \"./store/reducers/main\";\nimport authReducer from \"./store/reducers/auth\";\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst rootReducer = combineReducers({\n    main: mainReducer,\n    auth: authReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n))\n\nconst app = (\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JumbotronCard\":\"Jumbotron_JumbotronCard__3-luG\",\"Jumbotron\":\"Jumbotron_Jumbotron__3Kvp3\",\"ClientInfo\":\"Jumbotron_ClientInfo__KKrvr\",\"Arrow\":\"Jumbotron_Arrow__3Avxe\",\"OnFullScreen\":\"Jumbotron_OnFullScreen__r9XPf\",\"Blinking\":\"Jumbotron_Blinking__1nnaP\",\"blink\":\"Jumbotron_blink__38mpP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JumbotronModal\":\"JumbotronModal_JumbotronModal__30HGW\",\"ClientInfo\":\"JumbotronModal_ClientInfo__nW823\",\"Arrow\":\"JumbotronModal_Arrow__2UVj0\",\"CloseIcon\":\"JumbotronModal_CloseIcon__PIk69\",\"Blinking\":\"JumbotronModal_Blinking__yohTw\",\"blink\":\"JumbotronModal_blink__2nzst\"};","import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const fetchDataStart = () => {\n    return {\n        type: actionTypes.FETCH_DATA_START\n    }\n}\n\nexport const fetchDataFail = (error) => {\n    return {\n        type: actionTypes.FETCH_DATA_FAIL,\n        error\n    }\n}\n\nexport const fetchDataSuccess = (data, dataKey) => {\n    return {\n        type: actionTypes.FETCH_DATA_SUCCESS,\n        data,\n        dataKey\n    }\n}\n\nexport const fetchData = () => {\n    return dispatch => {\n        dispatch(fetchDataStart())\n        axios.get('https://nfq-academy-ac4e1.firebaseio.com/data.json')\n            .then(response => {\n                const dataKey = Object.keys(response.data)[0]\n                // const data = response.data[arr]\n                dispatch(fetchDataSuccess(response.data[Object.keys(response.data)[0]], dataKey)\n            )})\n            .catch(error => {\n                console.log(error)\n                dispatch(fetchDataFail(error))\n            })\n    }\n}\n\nexport const jumbotronClicked = (jumbotronData, jumbotronIndex) => {\n    jumbotronData.index = jumbotronIndex\n    return {\n        type: actionTypes.JUMBOTRON_CLICKED,\n        jumbotronData\n    }\n}\n\nexport const closeJumbotronModal = () => {\n    return {\n        type: actionTypes.CLOSE_JUMBOTRON_MODAL\n    }\n}\nexport const timer = () => {\n    return {\n        type: actionTypes.TIMER_START\n    }\n}\n\nexport const registerClient = (data, specialistData, dataKey) => {\n    const lastClient = () => {\n        let lastClient = {\n            name: specialistData.lastClientName,\n            timeLeft: specialistData.visitTime\n        }\n        if(specialistData.clients.length > 0) {\n            lastClient = specialistData.clients[specialistData.clients.length-1]\n        } \n        return lastClient\n    } \n    const clientName = lastClient().name+1\n    const timeLeft = lastClient().timeLeft + specialistData.visitTime\n    const client = {name:clientName, timeLeft:timeLeft}\n    const specialistIndex = () => {\n        let index = 0\n            for( let i=0; i< data.length; i++){\n                if(data[i].name === specialistData.name){\n                    index = i\n                    break\n                }\n            }\n            return index\n        }\n    const newClients = data[specialistIndex()].clients.concat(client)\n    let specialist = data[specialistIndex()]\n    let newData = data\n    const registrationSuccessData = {\n        name: clientName,\n        timeLeft: timeLeft,\n        specialistName : specialist.name}\n    specialist.clients = newClients\n    specialist.lastClientName = clientName\n    newData[specialistIndex()] = specialist\n    return dispatch =>{\n        axios.post('https://nfq-academy-ac4e1.firebaseio.com/data.json',newData)\n         .then(response => {\n            const newDataKey = response.data.name\n            return (\n            axios.delete(`https://nfq-academy-ac4e1.firebaseio.com/data/${dataKey}.json`)\n            .then(() =>  {\n                dispatch(registerClientSuccess(specialistData, newData, registrationSuccessData, newDataKey))\n                })\n            .catch(error => console.log(error))\n              )} )  \n        .catch(error => console.log(error))\n    }\n}\n\nexport const registerClientSuccess = (specialistData, newData, registrationSuccessData, dataKey) => {\n    return {\n        type: actionTypes.REGISTER_CLIENT,\n        specialistData,\n        newData,\n        registrationSuccessData,\n        dataKey\n}}\n\nexport const closeSuccessScreen = () => {\n    return {\n        type: actionTypes.CLOSE_SUCCESS_SCREEN\n    }\n}\n\nexport const callPatient = (index) => {\n    return {\n        type: actionTypes.CALL_PATIENT,\n        index\n    }\n}\n\nexport const patientServedSuccess = (newData, visitTime, dataKey, withPatient) => {\n    return {\n        type: actionTypes.PATIENT_SERVED,\n        newData,\n        visitTime,\n        dataKey,\n        withPatient\n    }\n}\n\nexport const patientServedFail = (error) => {\n    return {\n        type:actionTypes.PATIENT_SERVED_FAIL\n    }\n}\n\nexport const patientSaveStart = () => {\n    return {\n        type:actionTypes.PATIENT_SAVE_START\n    }\n}\n\nexport const patientSaved = (specialistIndex, visitTime, patient, dataKey, data, withPatient) => {\n    patient.timeLeft = visitTime\n    patient.specialistIndex = specialistIndex\n    const clientsArray = data[specialistIndex].clients.slice(1)\n    const newData = data\n    newData[specialistIndex].clients = clientsArray\n    let timeSubstract = 0\n    if(newData[specialistIndex].clients[0].timeLeft){\n        timeSubstract = newData[specialistIndex].clients[0].timeLeft\n    } \n    newData[specialistIndex].clients.map((item,i) =>(\n        newData[specialistIndex].clients[i].timeLeft=item.timeLeft-timeSubstract\n    ))\n    let withPatientFalse = withPatient\n    withPatientFalse[specialistIndex] = false\n\n    return dispatch => {\n        dispatch(patientSaveStart())\n        axios.post(\"https://nfq-academy-ac4e1.firebaseio.com/servedClients.json\", patient)\n            .then(() => \n                axios.post(`https://nfq-academy-ac4e1.firebaseio.com/data.json`,newData)\n                    .then(response => { \n                        const newDataKey = response.data.name\n                        return(\n                        axios.delete(`https://nfq-academy-ac4e1.firebaseio.com/data/${dataKey}.json`)\n                            .then( () => dispatch(patientServedSuccess(newData, visitTime, newDataKey, withPatient)))\n                            .catch(error => console.log(error)))}\n                    )\n                    .catch(error => console.log(error))\n            )\n            .catch(error => dispatch(patientServedFail()))\n    }\n}\n\nexport const  fetchServedPatientsStart = () => {\n    return {\n        type: actionTypes.FETCH_SERVED_PATIENTS_START\n    }\n}\n\nexport const fetchServedPatientsFail = (error) => {\n    return {\n        type: actionTypes.FETCH_SERVED_PATIENTS_FAIL,\n        error\n    }\n}\n\nexport const fecthServedPatientsSuccess = (patientsArr) => {\n    return {\n        type: actionTypes.FETCH_SERVED_PATIENTS_SUCCESS,\n        patientsArr\n    }\n}\n\nexport const fetchServedPatients = () => {\n    return dispatch => {\n        dispatch(fetchServedPatientsStart())\n        axios.get(\"https://nfq-academy-ac4e1.firebaseio.com/servedClients.json\")\n            .then( res => {\n                const fetchedPatients = []\n                for (const key in res.data) {\n                    fetchedPatients.push({\n                    ...res.data[key],\n                    key: key})\n                }\n                dispatch(fecthServedPatientsSuccess(fetchedPatients))\n            })\n            .catch ( error => {\n                dispatch(fetchServedPatientsFail(error))\n            })\n    }\n}\n\nexport const addVisitTime = (specialistIndex) => {\n    return {\n        type: actionTypes.ADD_VISIT_TIME,\n        specialistIndex\n    }\n}","import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n    return {\n      type: actionTypes.AUTH_START\n    }\n  }\n  \nexport const authSuccess = (token, userId) => {\n    return {\n      type: actionTypes.AUTH_SUCCESS,\n      idToken: token,\n      userId: userId\n    }\n  }\n  \nexport const authFail = (error) => {\n    return {\n      type: actionTypes.AUTH_FAIL,\n      error\n    }\n  }\n\nexport const auth = (email, password, login) => {\n    return dispatch => {\n        dispatch(authStart())\n        const authData = {\n            email,\n            password,\n            returnSecureToken: true\n        }\n        let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAKF538j0hsnR4r0kIRHSmW1RIRj-LN0cA\"\n        if (login) {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAKF538j0hsnR4r0kIRHSmW1RIRj-LN0cA\"\n        }\n        axios.post(url, authData)\n            .then(response => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn *1000)\n                localStorage.setItem(\"token\", response.data.idToken)\n                localStorage.setItem(\"expirationDate\", expirationDate)\n                localStorage.setItem(\"userId\", response.data.localId)\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\n                dispatch(checkSpecialist(response.data.localId))\n                dispatch(checkAuthTimeout(response.data.expiresIn))\n            })\n            .catch(error => {\n                dispatch(authFail(error.response.data.error))\n            })\n    }\n}\n\nexport const checkSpecialistFail = (error) => {\n    return {\n        type: actionTypes.CHECK_SPECIALIST_FAIL,\n        error\n    }\n}\n\nexport const checkSpecialistSuccess = (index) => {\n    return {\n        type: actionTypes.CHECK_SPECIALIST_SUCCESS,\n        index\n    }\n}\n\nexport const checkSpecialist = (userId) => {\n  return dispatch => {\n    axios.get(\"https://nfq-academy-ac4e1.firebaseio.com/specialists.json\")\n      .then(response => {\n        let index = null\n        for (const id in response.data){\n          if( id === userId ){\n            index = response.data[id]\n            dispatch(checkSpecialistSuccess(index))\n          }\n        }\n        if (index === null) {\n          dispatch(checkSpecialistSuccess(null)\n          )}   \n      })\n      .catch(error => {\n        dispatch(checkSpecialistFail(error.response.data.error))\n    })\n  }\n}\n\nexport const resetError = () => {\n    return {\n        type: actionTypes.RESET_ERROR\n    }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n      setTimeout(() => {\n        dispatch(logout())\n      }, expirationTime*1000)\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('userId')\n    return {\n      type: actionTypes.LOGOUT\n    }\n}\n  \nexport const authCheckLogin = () => {\n    return dispatch => {\n      dispatch(authStart())\n      const token = localStorage.getItem(\"token\")\n      if (!token) {\n        dispatch(logout())\n      } else {\n        const expirationDate = new Date(localStorage.getItem(\"expirationDate\"))\n        if (expirationDate > new Date()){\n          const userId = localStorage.getItem(\"userId\")\n          dispatch(authSuccess(token, userId))\n          dispatch(checkSpecialist(userId))\n          dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\n        } else {\n          dispatch(logout())\n        }\n      }\n    }\n  }","export {\n    jumbotronClicked,\n    closeJumbotronModal,\n    timer,\n    registerClient,\n    closeSuccessScreen,\n    callPatient,\n    patientSaved,\n    addVisitTime,\n    fetchData,\n    fetchServedPatients\n} from \"./main\";\n\nexport {\n    auth,\n    resetError,\n    authCheckLogin,\n    logout\n} from \"./auth\";","import React from \"react\";\nimport Card from 'react-bootstrap/Card';\n\nimport Styles from \"./Jumbotron.module.css\";\n\nconst jumbotronContainer = (props) => {\n    \n    let specialistStyle = null;\n\n    if(props.specialist){\n        specialistStyle = {\"width\":\"50%\", \"fontSize\":\"150%\"}\n    }\n\n    let clientsInfo  = \n        props.clients.slice(0,5).map(client => (\n            <div key={client.name} className={Styles.ClientInfo}>\n                <span>{client.name}</span>\n                <i className={`fas fa-arrow-right ${Styles.Arrow}`}></i>\n                <span>{Math.ceil(client.timeLeft,1)} min</span>\n            </div>             \n        ))  \n\n    if(props.clients[0]){\n        if(props.clients[0].timeLeft < 0) {\n        const firstClient =  props.clients[0]\n        clientsInfo[0] =\n            <div key={firstClient.name} className={Styles.ClientInfo}>\n                <span className={Styles.Blinking}>{firstClient.name}</span>\n                <i className={`fas fa-arrow-right ${Styles.Arrow} ${Styles.Blinking}`}></i>\n                <span className={Styles.Blinking}>{Math.ceil(firstClient.timeLeft,1)} min</span>\n            </div> \n    }}\n\n    if (props.highlight || props.highlight === 0) {\n        const firstClient =  props.clients[0]\n             clientsInfo[0] = \n                <div key={firstClient.name} className={Styles.ClientInfo} style={{\"display\":\"block\", \"marginBottom\":\"2.5%\"}}>\n                     <span style={{\"color\":\"green\",\"fontSize\":\"120%\"}}>{firstClient.name}</span>\n                </div> \n    }\n    \n    return(\n    <>\n        <Card className={Styles.JumbotronCard} onClick={props.onclick} style={specialistStyle} >\n            <Card.Header \n                style={{\n                \"backgroundColor\": \"#59A9FF\",\n                \"color\":\"white\", \n                \"fontWeight\":\"bold\"}}\n                >\n                    {props.name.toUpperCase()}\n            </Card.Header>\n            <Card.Body className={Styles.Jumbotron}>\n                {clientsInfo}\n            </Card.Body>\n        </Card> \n    </>\n)}\nexport default jumbotronContainer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__1IxrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Home_Container__65KCI\"};"],"sourceRoot":""}